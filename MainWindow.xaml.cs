using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Text.RegularExpressions;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;

namespace MyApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        [Serializable]
        public struct Info
        {
            public int counter;
            public HashSet<String> pathes;
            public HashSet<String> cf;
            public HashSet<String> canonical;
            public HashSet<String> cf2;
        }
        public class Word
        {
            public string Term { get; set; }
            public int Frequency { get; set; }
            public string CS { get; set; }
            public string Canonical { get; set; }
            public string CS2 { get; set; }
            public List<string> Files { get; set; }
        }
        SortedDictionary<String, Info> dictionary;
        String find = "";
        String lastFile = "";
        bool flag = true;

        public MainWindow()
        {
            InitializeComponent();
            ShowGrid();
        }
        public void CreateNew()
        {
            dictionary = new SortedDictionary<String, Info>();
            ReadText(dictionary, @"E:\UNIVER\TEXT\1.txt");
            ReadText(dictionary, @"E:\UNIVER\TEXT\2.txt");
            ReadText(dictionary, @"E:\UNIVER\TEXT\3.txt");
            ReadText(dictionary, @"E:\UNIVER\TEXT\4.txt");
            ReadText(dictionary, @"E:\UNIVER\TEXT\5.txt");
        }
        public void Serialize()
        {
            Stream s = File.Open("temp.dat", FileMode.Create);
            BinaryFormatter b = new BinaryFormatter();
            b.Serialize(s, dictionary);
            s.Close();
        }
        public void DeSerialize()
        {
            Stream s = File.Open("temp.dat", FileMode.Open);
            BinaryFormatter b = new BinaryFormatter();
            dictionary = (SortedDictionary<String, Info>)b.Deserialize(s);
            s.Close();
        }

        void ReadText(SortedDictionary<String, Info> l, string filepath)
        {
            flag = false;
            lastFile = filepath;
            string text = System.IO.File.ReadAllText(filepath);

            if (dictionary["the"].pathes.Contains(filepath))
            {
                MessageBox.Show("This file has already been handled");
                return;
            }
            run_cmd("chunk.py", filepath);
            MatchCollection mc = Regex.Matches(text, @"[a-zA-Z]+[-]{0,1}[a-zA-Z']*");
            foreach (Match match in mc)
            {
                String c = match.ToString();
                if (l.TryGetValue(c.ToLower(), out Info i))
                {
                    i.counter++;
                    i.pathes.Add(filepath);
                    l[c.ToLower()] = i;
                }
                else if (l.TryGetValue(c, out Info h))
                {
                    h.counter++;
                    h.pathes.Add(filepath);
                    l[c] = h;
                }
                else
                {
                    Info k = new Info();
                    k.counter = 1;
                    k.pathes = new HashSet<String>();
                    k.pathes.Add(filepath);
                    k.cf = new HashSet<string>();
                    k.cf2 = new HashSet<string>();
                    k.canonical = new HashSet<string>();
                    l.Add(c, k);
                }
            }
            Update();
            PaintFile(filepath);
            MessageBox.Show("You can see file with name "+filepath+". USE Merge to continue");
        }
        public string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python.exe";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }
        public void Update()
        {
            string[] text = System.IO.File.ReadAllLines("output.txt");
            for (int i = 0; i < text.Length; i++)
            {
                string[] t = text[i].Split(' ');
                t[2] = t[2].ToLower();
                if (dictionary.TryGetValue(t[0].ToLower(), out Info k))
                {
                    k.cf.Add(t[1]);
                    k.canonical.Add(t[2]);
                    k.cf2.Add(ToPrimary(t[1]));
                    dictionary[t[0].ToLower()] = k;
                }
                else if (dictionary.TryGetValue(t[0], out Info l))
                {
                    l.cf.Add(t[1]);
                    l.canonical.Add(t[2]);
                    l.cf2.Add(ToPrimary(t[1]));
                    dictionary[t[0]] = l;
                }
            }
        }
        public void PaintFile(string filepath)
        {
            String newFilePath = filepath.Substring(0, filepath.Length - 4) + "_painted.txt";
            string[] text = System.IO.File.ReadAllLines(filepath);
            for (int i = 0; i < text.Length; i++)
            {
                string[] t = text[i].Split(' ');
                for (int j = 0; j < t.Length; j++)
                {
                    string thisWord = t[j];
                    var re = new Regex("[.,!?;”“\"]+");
                    string w = re.Replace(thisWord, "");
                    int diff = thisWord.Length - w.Length;
                    if (w.Length != 0)
                    {
                        String cf = "";
                        HashSet<String> hs;
                        Random r = new Random();
                        if (dictionary.ContainsKey(w.ToLower()))
                        {
                            hs = dictionary[w.ToLower()].cf;
                        }
                        else if (dictionary.ContainsKey(w))
                        {
                            hs = dictionary[w].cf;
                        }
                        else hs = new HashSet<string>();
                        foreach (String c in hs)
                        {
                            cf = c;
                            if (r.Next() % 10 == 0)
                                continue;
                            break;
                        }
                        bool k = false;
                        bool d = false;
                        if (thisWord.ToCharArray()[0] == '.' ||
                            thisWord.ToCharArray()[0] == ',' ||
                            thisWord.ToCharArray()[0] == ';' ||
                            thisWord.ToCharArray()[0] == '!' ||
                            thisWord.ToCharArray()[0] == '?' ||
                            thisWord.ToCharArray()[0] == ':')
                        {
                            d = true;
                            thisWord = thisWord.ToCharArray()[0] + "_" + thisWord.ToCharArray()[0] + thisWord.Substring(1,thisWord.Length-1);
                        }
                        if (thisWord.ToCharArray()[0] == '”' ||
                            thisWord.ToCharArray()[0] == '“' ||
                             thisWord.ToCharArray()[0] == '\"')
                        {
                            k = true;
                            thisWord = thisWord.Substring(1, thisWord.Length - 1);
                            thisWord = "\"_\"" + thisWord;
                        }
                        if (k||d) diff -= 1;
                        if (diff == 0)
                            thisWord += "_" + cf;
                        else if (diff == 1)
                        {
                            string buf = thisWord.Substring(thisWord.Length - 1, 1);
                            thisWord = thisWord.Substring(0, thisWord.Length - 1) + "_" + cf + buf + "_" + buf;
                        }
                        else if (diff >= 2)
                        {
                            string buf = thisWord.Substring(thisWord.Length - 2, 1);
                            string buf2 = thisWord.Substring(thisWord.Length - 1, 1);
                            thisWord = thisWord.Substring(0, thisWord.Length - 2) + "_" + cf + buf + "_" + buf;
                            thisWord += buf2 + "_" + buf2;
                        }

                    }
                    t[j] = thisWord;
                }

                text[i] = string.Join(" ", t);
            }

            File.WriteAllLines(newFilePath, text, Encoding.Unicode);
        }
        public string ToPrimary(string cf)
        {
            string s = cf;
            if (s.Contains("NNP")) return "NNP";
            String[] buf = { "NN", "VB", "JJ", "RB" };
            foreach (string c in buf)
            {
                if (cf.Substring(0, cf.Length - 1) == c)
                {
                    s = c;
                    break;
                }
            }
            return s;
        }
        public void ShowGrid()
        {
            DataGridXAML.ItemsSource = null;
            DataGridXAML.Items.Clear();
            if (dictionary != null && lb2 != null)
            {

                lb2.Content = dictionary.Count;
                List<KeyValuePair<String, Info>> list = dictionary.ToList();
                List<Word> l = new List<Word>();
                foreach (KeyValuePair<String, Info> i in list)
                {
                    if (find == "#Finder#")
                        find = "";
                    if(i.Value.pathes.Contains(lastFile) || flag)
                    if (i.Key.Length >= find.Length)
                        if (i.Key.Substring(0, find.Length).Contains(find))
                        {
                            l.Add(new Word()
                            {
                                Term = i.Key,
                                Frequency = i.Value.counter,
                                Files = i.Value.pathes.ToList(),
                                CS = string.Join(",", i.Value.cf),
                                Canonical = string.Join(",", i.Value.canonical),
                                CS2 = string.Join(",", i.Value.cf2)
                            });
                        }
                }
                DataGridXAML.ItemsSource = l;
            }
        }



        private void Tb1_TextChanged(object sender, TextChangedEventArgs e)
        {
            find = tb1.Text;
            ShowGrid();
        }

        private void Tb1_GotFocus(object sender, RoutedEventArgs e)
        {
            if (tb1.Text == "#Finder#")
                tb1.Text = "";
        }

        private void Window_Initialized(object sender, EventArgs e)
        {
            DeSerialize();
        }

        private void Tb2_GotFocus(object sender, RoutedEventArgs e)
        {
            if (tb2.Text == "#Path of File#") tb2.Text = "";
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            ReadText(dictionary, tb2.Text);
            ShowGrid();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            dictionary = new SortedDictionary<String, Info>();
            ShowGrid();
        }

        private void Tb2_LostFocus(object sender, RoutedEventArgs e)
        {
            if (tb2.Text == "") tb2.Text = "#Path of File#";
        }

        private void Tb1_LostFocus(object sender, RoutedEventArgs e)
        {
            if (tb1.Text == "") tb1.Text = "#Finder#";
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            AddWord(tb1.Text);
            ShowGrid();
        }
        public void AddWord(String word)
        {
            String c = word;
            if (!dictionary.TryGetValue(c, out Info h))
            {
                Info k = new Info();
                k.counter = 0;
                k.pathes = new HashSet<String>();
                k.cf = new HashSet<String>();
                k.cf2 = new HashSet<String>();
                k.canonical = new HashSet<String>();
                dictionary.Add(c, k);
            }
        }

        private void Bt4_Click(object sender, RoutedEventArgs e)
        {
            Serialize();
            MessageBox.Show("The dictionary has been saved");
        }

        private void DataGridXAML_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            String newWord = ((TextBox)e.EditingElement).Text;
            Word thisWord = (Word)DataGridXAML.Items.GetItemAt(e.Row.GetIndex());
            if ((string)e.Column.Header == "Word" && newWord != thisWord.Term)
            {
                if (dictionary.TryGetValue(newWord, out Info value))
                {
                    value.counter += thisWord.Frequency;
                    foreach (string i in thisWord.Files)
                    {
                        value.pathes.Add(i);
                    }
                    dictionary[newWord] = value;
                }
                else
                {
                    Info v;
                    v.canonical = new HashSet<string>();
                    v.cf = new HashSet<string>();
                    v.cf2 = new HashSet<string>();
                    v.pathes = new HashSet<string>();
                    v.counter = thisWord.Frequency;
                    foreach (string i in thisWord.CS.Split(','))
                    {
                        v.cf.Add(i);
                    }
                    foreach (string i in thisWord.CS2.Split(','))
                    {
                        v.cf2.Add(i);
                    }
                    foreach (string i in thisWord.Canonical.Split(','))
                    {
                        v.canonical.Add(i);
                    }
                    foreach (string i in thisWord.Files)
                    {
                        v.pathes.Add(i);
                    }
                    dictionary[newWord] = v;
                }
                if (thisWord != null) dictionary.Remove(thisWord.Term);
            }
            else if ((string)e.Column.Header == "CS")
            {
                Info a = dictionary[thisWord.Term];
                a.cf.Clear();
                foreach (string i in newWord.Split(','))
                {
                    a.cf.Add(i);
                }
                dictionary[thisWord.Term] = a;
            }
            else if ((string)e.Column.Header == "Canonical CS")
            {
                Info a = dictionary[thisWord.Term];
                a.cf2.Clear();
                foreach (string i in newWord.Split(','))
                {
                    a.cf2.Add(i);
                }
                dictionary[thisWord.Term] = a;
            }
            else if ((string)e.Column.Header == "Canonical")
            {
                Info a = dictionary[thisWord.Term];
                a.canonical.Clear();
                foreach (string i in newWord.Split(','))
                {
                    a.canonical.Add(i);
                }
                dictionary[thisWord.Term] = a;
            }
            ShowGrid();

        }


        private void DataGridXAML_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            var grid = (DataGrid)sender;
            if (Key.Delete == e.Key)
            {
                if (MessageBox.Show("Delete this word?", "Delete", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
                {
                    foreach (Word word in grid.SelectedItems)
                    {
                        dictionary.Remove(word.Term);
                    }
                }
                ShowGrid();
            }
        }

        private void DataGridXAML_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Word word = ((sender as DataGrid).SelectedItem as Word);

            if (word != null) lbox1.ItemsSource = word.Files;
        }

        private void Lbox1_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            string file = ((sender as ListBox).SelectedItem as string);
            Process.Start(file);
        }


        private void Lbox1_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if (Key.Enter == e.Key)
            {
                string file = ((sender as ListBox).SelectedItem as string);
                tb2.Text = file;
            }
        }

        private void Bt5_Click(object sender, RoutedEventArgs e)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.RedirectStandardInput = false;
            start.FileName = "help.txt";
            Process.Start(start);
        }

        private void Bt6_Click(object sender, RoutedEventArgs e)
        {
            String filepath = tb2.Text;
            filepath = filepath.Substring(0, filepath.Length - 4) + "_painted.txt";
            FileReader fr = new FileReader(filepath);
            fr.Show();

        }

        private void Bt7_Click(object sender, RoutedEventArgs e)
        {
            Stat s = new Stat();
            s.Show();
        }

        private void Bt8_Click(object sender, RoutedEventArgs e)
        {
            flag = true;
            ShowGrid();
            MessageBox.Show("The dictionary was updated");
        }
    }
}